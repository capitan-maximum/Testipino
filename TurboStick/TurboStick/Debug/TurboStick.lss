
TurboStick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ca0  00000d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800102  00800102  00000d36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013fc  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b16  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e89  00000000  00000000  00002d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00003bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a1  00000000  00000000  00003cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd0  00000000  00000000  0000445d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000502d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__ctors_end>
   4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_1>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	05 01       	movw	r0, r10
  6a:	09 04       	cpc	r0, r9
  6c:	a1 01       	movw	r20, r2
  6e:	09 01       	movw	r0, r18
  70:	a1 00       	.word	0x00a1	; ????
  72:	09 30       	cpi	r16, 0x09	; 9
  74:	09 31       	cpi	r16, 0x19	; 25
  76:	09 32       	cpi	r16, 0x29	; 41
  78:	15 81       	ldd	r17, Z+5	; 0x05
  7a:	25 7f       	andi	r18, 0xF5	; 245
  7c:	75 08       	sbc	r7, r5
  7e:	95 03       	fmuls	r17, r21
  80:	81 02       	muls	r24, r17
  82:	c0 05       	cpc	r28, r0
  84:	09 19       	sub	r16, r9
  86:	01 29       	or	r16, r1
  88:	06 15       	cp	r16, r6
  8a:	00 25       	eor	r16, r0
  8c:	01 95       	neg	r16
  8e:	06 75       	andi	r16, 0x56	; 86
  90:	01 81       	ldd	r16, Z+1	; 0x01
  92:	02 95       	swap	r16
  94:	02 75       	andi	r16, 0x52	; 82
  96:	01 81       	ldd	r16, Z+1	; 0x01
  98:	03 c0       	rjmp	.+6      	; 0xa0 <usbDescriptorConfiguration+0x6>

0000009a <usbDescriptorConfiguration>:
  9a:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  aa:	00 00 09 21 01 01 00 01 22 32 00 07 05 81 03 08     ...!...."2......
  ba:	00 32                                               .2

000000bc <usbDescriptorDevice>:
  bc:	12 01 10 01 00 00 00 08 c0 16 dc 05 00 01 01 02     ................
  cc:	00 01                                               ..

000000ce <usbDescriptorStringDevice>:
  ce:	20 03 54 00 75 00 72 00 62 00 6f 00 73 00 74 00      .T.u.r.b.o.s.t.
  de:	69 00 63 00 6b 00 20 00 35 00 30 00 30 00 30 00     i.c.k. .5.0.0.0.

000000ee <usbDescriptorStringVendor>:
  ee:	26 03 6c 00 75 00 72 00 6a 00 75 00 73 00 40 00     &.l.u.r.j.u.s.@.
  fe:	6b 00 6f 00 61 00 6c 00 69 00 74 00 69 00 6f 00     k.o.a.l.i.t.i.o.
 10e:	2e 00 66 00 69 00                                   ..f.i.

00000114 <usbDescriptorString0>:
 114:	04 03 09 04                                         ....

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d8 e0       	ldi	r29, 0x08	; 8
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	e0 ea       	ldi	r30, 0xA0	; 160
 12c:	fc e0       	ldi	r31, 0x0C	; 12
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a2 30       	cpi	r26, 0x02	; 2
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a2 e0       	ldi	r26, 0x02	; 2
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ae 33       	cpi	r26, 0x3E	; 62
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <main>
 14e:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 156:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 158:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 15e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 160:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 162:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 164:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 166:	09 c0       	rjmp	.+18     	; 0x17a <usbCrcLoopEntry>

00000168 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 168:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 16a:	82 27       	eor	r24, r18

0000016c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 16c:	97 95       	ror	r25
    ror     resCrcL
 16e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 170:	10 f0       	brcs	.+4      	; 0x176 <usbCrcNoXor>
    eor     resCrcL, polyL
 172:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 174:	95 27       	eor	r25, r21

00000176 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 176:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 178:	c8 f3       	brcs	.-14     	; 0x16c <usbCrcBitLoop>

0000017a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 17a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 17c:	a8 f3       	brcs	.-22     	; 0x168 <usbCrcByteLoop>

0000017e <usbCrcReady>:
usbCrcReady:
    ret
 17e:	08 95       	ret

00000180 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 180:	ea df       	rcall	.-44     	; 0x156 <usbCrc16>
    st      ptr+, resCrcL
 182:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 184:	9d 93       	st	X+, r25
    ret
 186:	08 95       	ret

00000188 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 188:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 18a:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 18c:	cf 93       	push	r28
    push    YH                  ;[-20]
 18e:	df 93       	push	r29

00000190 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 190:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 192:	4b 9b       	sbis	0x09, 3	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 194:	e9 f7       	brne	.-6      	; 0x190 <waitForJ>

00000196 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 196:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK              ;[-14]
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <foundK>
    sbis    USBIN, USBMINUS
 19a:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <foundK>
    sbis    USBIN, USBMINUS
 19e:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 1a0:	07 c0       	rjmp	.+14     	; 0x1b0 <foundK>
    sbis    USBIN, USBMINUS
 1a2:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <foundK>
    sbis    USBIN, USBMINUS
 1a6:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <foundK>
    sbis    USBIN, USBMINUS
 1aa:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    foundK
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1ae:	8b c0       	rjmp	.+278    	; 0x2c6 <sofError>

000001b0 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 1b0:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 1b2:	c0 91 21 01 	lds	r28, 0x0121	; 0x800121 <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 1b6:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 1b8:	c8 5d       	subi	r28, 0xD8	; 216
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 1ba:	de 4f       	sbci	r29, 0xFE	; 254
    push    shift               ;[-5]
 1bc:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 1be:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 1c0:	4b 9b       	sbis	0x09, 3	; 9
    rjmp    haveTwoBitsK        ;[-1]
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 1c4:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 1c6:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 1c8:	e6 cf       	rjmp	.-52     	; 0x196 <waitForK>

000001ca <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 1ca:	0f 93       	push	r16
    push    x2              ;[3]
 1cc:	1f 93       	push	r17
    push    x3              ;[5]
 1ce:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 1d0:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 1d2:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 1d4:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 1d6:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK     ;[12]
 1d8:	0c 70       	andi	r16, 0x0C	; 12
    bst     x1, USBMINUS    ;[13]
 1da:	03 fb       	bst	r16, 3
    bld     shift, 7        ;[14]
 1dc:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 1de:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 1e0:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 1e2:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 1e4:	39 c0       	rjmp	.+114    	; 0x258 <rxbit1>

000001e6 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 1e6:	1c 70       	andi	r17, 0x0C	; 12
    ori     x3, 1<<6    ;[04] will not be shifted any more
 1e8:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 1ea:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 1ec:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 1ee:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <didUnstuff6>

000001f2 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 1f2:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 1f4:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 1f6:	1c 70       	andi	r17, 0x0C	; 12
    andi    shift, ~0x80;[02]
 1f8:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 1fa:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <didUnstuff7>

000001fe <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 1fe:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 200:	09 b1       	in	r16, 0x09	; 9
    andi    shift, ~0x80;[01]
 202:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 204:	0c 70       	andi	r16, 0x0C	; 12
    breq    se0         ;[03]
 206:	d1 f1       	breq	.+116    	; 0x27c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 208:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 20a:	00 c0       	rjmp	.+0      	; 0x20c <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 20c:	23 c0       	rjmp	.+70     	; 0x254 <didUnstuffE>

0000020e <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 20e:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 210:	19 b1       	in	r17, 0x09	; 9
    andi    shift, ~0x80;[01]
 212:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 214:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;[03]
 216:	91 f1       	breq	.+100    	; 0x27c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 218:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 21a:	00 c0       	rjmp	.+0      	; 0x21c <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 21c:	25 c0       	rjmp	.+74     	; 0x268 <didUnstuffO>

0000021e <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 21e:	0c 70       	andi	r16, 0x0C	; 12
    eor     x2, x1      ;[04]
 220:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 222:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 224:	12 f4       	brpl	.+4      	; 0x22a <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 226:	5d 5f       	subi	r21, 0xFD	; 253
	...

0000022a <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 22a:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 22c:	27 95       	ror	r18

0000022e <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 22e:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 230:	19 b1       	in	r17, 0x09	; 9
    brcc    unstuff6    ;[01]
 232:	c8 f6       	brcc	.-78     	; 0x1e6 <unstuff6>
    andi    x2, USBMASK ;[02]
 234:	1c 70       	andi	r17, 0x0C	; 12
    eor     x1, x2      ;[03]
 236:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 238:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 23a:	27 95       	ror	r18

0000023c <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 23c:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 23e:	c8 f6       	brcc	.-78     	; 0x1f2 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 240:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 242:	49 93       	st	Y+, r20

00000244 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 244:	09 b1       	in	r16, 0x09	; 9
    andi    x1, USBMASK ;[01]
 246:	0c 70       	andi	r16, 0x0C	; 12
    eor     x2, x1      ;[02]
 248:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 24a:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 24c:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 24e:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 250:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 252:	a8 f6       	brcc	.-86     	; 0x1fe <unstuffEven>

00000254 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 254:	46 95       	lsr	r20
    lsr     x3          ;[09]
 256:	46 95       	lsr	r20

00000258 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 258:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;[01]
 25a:	1c 70       	andi	r17, 0x0C	; 12
    breq    se0         ;[02]
 25c:	79 f0       	breq	.+30     	; 0x27c <se0>
    eor     x1, x2      ;[03]
 25e:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 260:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 262:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 264:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 266:	98 f6       	brcc	.-90     	; 0x20e <unstuffOdd>

00000268 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 268:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 26a:	60 f3       	brcs	.-40     	; 0x244 <rxBitLoop>

    subi    cnt, 1      ;[10]
 26c:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 26e:	09 b1       	in	r16, 0x09	; 9
    brcc    rxByteLoop  ;[01]
 270:	b0 f6       	brcc	.-84     	; 0x21e <rxByteLoop>
    rjmp    overflow
 272:	00 c0       	rjmp	.+0      	; 0x274 <overflow>

00000274 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 274:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 276:	1c bb       	out	0x1c, r17	; 28

00000278 <ignorePacket>:
ignorePacket:
    clr     token
 278:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 27a:	19 c0       	rjmp	.+50     	; 0x2ae <handleSetupOrOut>

0000027c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 27c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 27e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 280:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 282:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 284:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 286:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 288:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 28a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 28c:	09 f1       	breq	.+66     	; 0x2d0 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 28e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 290:	f9 f0       	breq	.+62     	; 0x2d0 <handleData>
    lds     shift, usbDeviceAddr;[17]
 292:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 296:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 298:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 29a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 29c:	ed cf       	rjmp	.-38     	; 0x278 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 29e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 2a0:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 2a2:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2a4:	51 f1       	breq	.+84     	; 0x2fa <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2a6:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2a8:	11 f0       	breq	.+4      	; 0x2ae <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2aa:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 2ac:	29 f7       	brne	.-54     	; 0x278 <ignorePacket>

000002ae <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 2ae:	00 93 26 01 	sts	0x0126, r16	; 0x800126 <usbCurrentTok>

000002b2 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 2b2:	3f 91       	pop	r19
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	2f 91       	pop	r18
 2be:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 2c0:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 2c2:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 2c4:	65 cf       	rjmp	.-310    	; 0x190 <waitForJ>

000002c6 <sofError>:
sofError:
    POP_RETI                    ;macro call
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	cf bf       	out	0x3f, r28	; 63
 2cc:	cf 91       	pop	r28
    reti
 2ce:	18 95       	reti

000002d0 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 2d0:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <usbCurrentTok>
    tst     shift               ;[20]
 2d4:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 2d6:	69 f3       	breq	.-38     	; 0x2b2 <doReturn>
    lds     x2, usbRxLen        ;[22]
 2d8:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <usbRxLen>
    tst     x2                  ;[24]
 2dc:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 2de:	91 f5       	brne	.+100    	; 0x344 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 2e0:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 2e2:	92 f1       	brmi	.+100    	; 0x348 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 2e4:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 2e8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 2ec:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2f0:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2f2:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2f4:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2f8:	27 c0       	rjmp	.+78     	; 0x348 <sendAckAndReti>

000002fa <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2fa:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2fe:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 300:	0c f5       	brge	.+66     	; 0x344 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 302:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 304:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 306:	49 f4       	brne	.+18     	; 0x31a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 308:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 30c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 30e:	1d c0       	rjmp	.+58     	; 0x34a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 310:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 314:	c8 e0       	ldi	r28, 0x08	; 8
    ldi     YH, hi8(usbTxBuf)   ;[44]
 316:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 318:	1c c0       	rjmp	.+56     	; 0x352 <usbSendAndReti>

0000031a <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 31a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 31e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 320:	14 c0       	rjmp	.+40     	; 0x34a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 322:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 326:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 328:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 32a:	13 c0       	rjmp	.+38     	; 0x352 <usbSendAndReti>

0000032c <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 32c:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 32e:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 330:	00 c0       	rjmp	.+0      	; 0x332 <bitstuffN+0x6>
    nop                     ;[9]
 332:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 334:	0b b9       	out	0x0b, r16	; 11
    rjmp    didStuffN       ;[0]
 336:	1a c0       	rjmp	.+52     	; 0x36c <didStuffN>

00000338 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 338:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 33a:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 33c:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 33e:	1d c0       	rjmp	.+58     	; 0x37a <didStuff6>

00000340 <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 340:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 342:	21 c0       	rjmp	.+66     	; 0x386 <didStuff7>

00000344 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 344:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 346:	02 c0       	rjmp	.+4      	; 0x34c <sendX3AndReti>

00000348 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 348:	32 ed       	ldi	r19, 0xD2	; 210

0000034a <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 34a:	43 2f       	mov	r20, r19

0000034c <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 34c:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 34e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 350:	32 e0       	ldi	r19, 0x02	; 2

00000352 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 352:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK     ;[-11]
 354:	1c 60       	ori	r17, 0x0C	; 12
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 356:	5b 9a       	sbi	0x0b, 3	; 11
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 358:	0b b1       	in	r16, 0x0b	; 11
    out     USBDDR, x2      ;[-7] <- acquire bus
 35a:	1a b9       	out	0x0a, r17	; 10
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 35c:	5c e0       	ldi	r21, 0x0C	; 12
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 35e:	20 e8       	ldi	r18, 0x80	; 128

00000360 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 360:	65 e3       	ldi	r22, 0x35	; 53

00000362 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 362:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 364:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 366:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 368:	27 95       	ror	r18
    ror     x2              ;[1]
 36a:	17 95       	ror	r17

0000036c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 36c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 36e:	f0 f6       	brcc	.-68     	; 0x32c <bitstuffN>
    lsr     bitcnt          ;[4]
 370:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 372:	b8 f7       	brcc	.-18     	; 0x362 <txBitLoop>
    brne    txBitLoop       ;[6]
 374:	b1 f7       	brne	.-20     	; 0x362 <txBitLoop>

    sbrs    shift, 0        ;[7]
 376:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 378:	05 27       	eor	r16, r21

0000037a <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 37a:	0b b9       	out	0x0b, r16	; 11
    ror     shift           ;[0] [10]
 37c:	27 95       	ror	r18
    ror     x2              ;[1]
 37e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 380:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 382:	d0 f6       	brcc	.-76     	; 0x338 <bitstuff6>
    ror     shift           ;[4]
 384:	27 95       	ror	r18

00000386 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 386:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 388:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 38a:	05 27       	eor	r16, r21
    nop                     ;[8]
 38c:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 38e:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 390:	0b b9       	out	0x0b, r16	; 11
    brcc    bitstuff7       ;[0] [11]
 392:	b0 f6       	brcc	.-84     	; 0x340 <bitstuff7>
    ld      shift, y+       ;[1]
 394:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 396:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 398:	19 f7       	brne	.-58     	; 0x360 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 39a:	03 7f       	andi	r16, 0xF3	; 243
    lds     x2, usbNewDeviceAddr;[6]
 39c:	10 91 25 01 	lds	r17, 0x0125	; 0x800125 <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 3a0:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 3a2:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 3a4:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 3a6:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 3a8:	11 f0       	breq	.+4      	; 0x3ae <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 3aa:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <usbDeviceAddr>

000003ae <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 3ae:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)   ;[3]
 3b0:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE     ;[4]
 3b2:	08 60       	ori	r16, 0x08	; 8
    in      x2, USBDDR      ;[5]
 3b4:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK     ;[6] set both pins to input
 3b6:	13 7f       	andi	r17, 0xF3	; 243
    mov     x3, x1          ;[7]
 3b8:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 3ba:	43 7f       	andi	r20, 0xF3	; 243
    ldi     x4, 4           ;[9]
 3bc:	54 e0       	ldi	r21, 0x04	; 4

000003be <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 3be:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 3c0:	f1 f7       	brne	.-4      	; 0x3be <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 3c2:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2      ;[22] <-- release bus now
 3c4:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 3c6:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 3c8:	74 cf       	rjmp	.-280    	; 0x2b2 <doReturn>

000003ca <usbFunctionSetup>:

uint8_t    idleRate;
uint8_t reportHIDData[4];

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 3ca:	fc 01       	movw	r30, r24
	usbRequest_t    *rq = (void *)data;

	if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 3cc:	90 81       	ld	r25, Z
 3ce:	90 76       	andi	r25, 0x60	; 96
 3d0:	90 32       	cpi	r25, 0x20	; 32
 3d2:	e1 f4       	brne	.+56     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

		if(rq->bRequest == USBRQ_HID_GET_REPORT)
 3d4:	81 81       	ldd	r24, Z+1	; 0x01
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	41 f4       	brne	.+16     	; 0x3ea <usbFunctionSetup+0x20>
		{  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
			/* we only have one report type, so don't look at wValue */
			usbMsgPtr = (void *)&reportHIDData;
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 3e2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
			return sizeof(reportHIDData);
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	08 95       	ret
		}
		else if(rq->bRequest == USBRQ_HID_GET_IDLE)
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	41 f4       	brne	.+16     	; 0x3fe <usbFunctionSetup+0x34>
		{
			usbMsgPtr = &idleRate;
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 3f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
			return 1;
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	08 95       	ret
		}
		else if(rq->bRequest == USBRQ_HID_SET_IDLE)
 3fe:	8a 30       	cpi	r24, 0x0A	; 10
 400:	39 f4       	brne	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		idleRate = rq->wValue.bytes[1];
 402:	83 81       	ldd	r24, Z+3	; 0x03
 404:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <idleRate>
	}
	else;
	/* no vendor specific requests implemented */	
	
	return 0;   /* default for not implemented requests: return no data back to host */
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
 410:	80 e0       	ldi	r24, 0x00	; 0
}
 412:	08 95       	ret

00000414 <hwInit>:
}

void hwInit(void)
{
	// Setup analog data collection
	ADMUX |= (1<<REFS0); // Set REFS0 = 1
 414:	ec e7       	ldi	r30, 0x7C	; 124
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 64       	ori	r24, 0x40	; 64
 41c:	80 83       	st	Z, r24
	ADMUX &= ~((1<<REFS1) | (1<<ADLAR)); // Set REFS1 = 0 and ADLAR = 0 (Use 5V ref and left adjusted results)
 41e:	80 81       	ld	r24, Z
 420:	8f 75       	andi	r24, 0x5F	; 95
 422:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); // Enable ADC with 128 factor on prescaler
 424:	ea e7       	ldi	r30, 0x7A	; 122
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	87 68       	ori	r24, 0x87	; 135
 42c:	80 83       	st	Z, r24
		
	DDRC = 0x00; // Enable analog inputs on A0-A2;
 42e:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x07; // Pull-ups for A0-A2;
 430:	87 e0       	ldi	r24, 0x07	; 7
 432:	88 b9       	out	0x08, r24	; 8
	
	// Digital inputs for buttons
	DDRB &= ~((1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) | (1<<DDB4)); // Set PB0-PB4 as inputs
 434:	84 b1       	in	r24, 0x04	; 4
 436:	80 7e       	andi	r24, 0xE0	; 224
 438:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB4)); // Pull-ups for PB0-PB4
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	8f 61       	ori	r24, 0x1F	; 31
 43e:	85 b9       	out	0x05, r24	; 5
	DDRD &= ~(1<<DDD7); // Set PD7 as input
 440:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1<<PORTD7); // Pull-up for PD7
 442:	5f 9a       	sbi	0x0b, 7	; 11
 444:	08 95       	ret

00000446 <rescale_analog>:
	readADC = ADC;
	reportHIDData[2] = rescale_analog(readADC, 230, 31) *-1; // Report Z-axis data
}

int8_t rescale_analog(uint16_t val, uint16_t scale, int16_t offset)
{
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	9b 01       	movw	r18, r22
	int16_t temp_val;
	if(val > (500 + offset) && val < (524 + offset))
 454:	ba 01       	movw	r22, r20
 456:	6c 50       	subi	r22, 0x0C	; 12
 458:	7e 4f       	sbci	r23, 0xFE	; 254
 45a:	68 17       	cp	r22, r24
 45c:	79 07       	cpc	r23, r25
 45e:	28 f4       	brcc	.+10     	; 0x46a <rescale_analog+0x24>
 460:	68 5e       	subi	r22, 0xE8	; 232
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	86 17       	cp	r24, r22
 466:	97 07       	cpc	r25, r23
 468:	a0 f1       	brcs	.+104    	; 0x4d2 <rescale_analog+0x8c>
		return 0;
	else
	{
		temp_val = val - (512 + offset);
 46a:	92 50       	subi	r25, 0x02	; 2
 46c:	84 1b       	sub	r24, r20
 46e:	95 0b       	sbc	r25, r21
		if(temp_val > 0)
 470:	18 16       	cp	r1, r24
 472:	19 06       	cpc	r1, r25
 474:	1c f4       	brge	.+6      	; 0x47c <rescale_analog+0x36>
		{
			temp_val -= 12;
 476:	ec 01       	movw	r28, r24
 478:	2c 97       	sbiw	r28, 0x0c	; 12
 47a:	02 c0       	rjmp	.+4      	; 0x480 <rescale_analog+0x3a>
		}
		else
		{
			temp_val += 12;
 47c:	ec 01       	movw	r28, r24
 47e:	2c 96       	adiw	r28, 0x0c	; 12
		}
		temp_val = (int) (round(temp_val * (254.0/scale)));
 480:	b9 01       	movw	r22, r18
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 06 05 	call	0xa0c	; 0xa0c <__floatunsisf>
 48a:	9b 01       	movw	r18, r22
 48c:	ac 01       	movw	r20, r24
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	8e e7       	ldi	r24, 0x7E	; 126
 494:	93 e4       	ldi	r25, 0x43	; 67
 496:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__divsf3>
 49a:	6b 01       	movw	r12, r22
 49c:	7c 01       	movw	r14, r24
 49e:	be 01       	movw	r22, r28
 4a0:	dd 0f       	add	r29, r29
 4a2:	88 0b       	sbc	r24, r24
 4a4:	99 0b       	sbc	r25, r25
 4a6:	0e 94 08 05 	call	0xa10	; 0xa10 <__floatsisf>
 4aa:	9b 01       	movw	r18, r22
 4ac:	ac 01       	movw	r20, r24
 4ae:	c7 01       	movw	r24, r14
 4b0:	b6 01       	movw	r22, r12
 4b2:	0e 94 94 05 	call	0xb28	; 0xb28 <__mulsf3>
 4b6:	0e 94 01 06 	call	0xc02	; 0xc02 <round>
 4ba:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__fixsfsi>
 4be:	26 2f       	mov	r18, r22
 4c0:	37 2f       	mov	r19, r23
		if(temp_val > 127)
 4c2:	20 38       	cpi	r18, 0x80	; 128
 4c4:	31 05       	cpc	r19, r1
 4c6:	3c f4       	brge	.+14     	; 0x4d6 <rescale_analog+0x90>
			return 127;
		else if(temp_val < -127)
 4c8:	21 38       	cpi	r18, 0x81	; 129
 4ca:	3f 4f       	sbci	r19, 0xFF	; 255
 4cc:	34 f0       	brlt	.+12     	; 0x4da <rescale_analog+0x94>
			return -127;
		else
			return temp_val;
 4ce:	86 2f       	mov	r24, r22
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <rescale_analog+0x96>

int8_t rescale_analog(uint16_t val, uint16_t scale, int16_t offset)
{
	int16_t temp_val;
	if(val > (500 + offset) && val < (524 + offset))
		return 0;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <rescale_analog+0x96>
		{
			temp_val += 12;
		}
		temp_val = (int) (round(temp_val * (254.0/scale)));
		if(temp_val > 127)
			return 127;
 4d6:	8f e7       	ldi	r24, 0x7F	; 127
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <rescale_analog+0x96>
		else if(temp_val < -127)
			return -127;
 4da:	81 e8       	ldi	r24, 0x81	; 129
		else
			return temp_val;
	}

 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	ff 90       	pop	r15
 4e2:	ef 90       	pop	r14
 4e4:	df 90       	pop	r13
 4e6:	cf 90       	pop	r12
 4e8:	08 95       	ret

000004ea <getStick>:
	DDRD &= ~(1<<DDD7); // Set PD7 as input
	PORTD |= (1<<PORTD7); // Pull-up for PD7
}

void getStick(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
	uint16_t readADC;
	
	ADMUX &= 0xF0; // Set MUX channel to A0
 4ee:	ec e7       	ldi	r30, 0x7C	; 124
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	80 7f       	andi	r24, 0xF0	; 240
 4f6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Get converting
 4f8:	ea e7       	ldi	r30, 0x7A	; 122
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	80 64       	ori	r24, 0x40	; 64
 500:	80 83       	st	Z, r24
	while(!(ADCSRA & (1<<ADIF))); // Wait for ADC to finish
 502:	80 81       	ld	r24, Z
 504:	84 ff       	sbrs	r24, 4
 506:	fd cf       	rjmp	.-6      	; 0x502 <getStick+0x18>
	ADCSRA |= (1 << ADIF); // Clear operating flag
 508:	ca e7       	ldi	r28, 0x7A	; 122
 50a:	d0 e0       	ldi	r29, 0x00	; 0
 50c:	88 81       	ld	r24, Y
 50e:	80 61       	ori	r24, 0x10	; 16
 510:	88 83       	st	Y, r24
	readADC = ADC;
 512:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 516:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	reportHIDData[1] = rescale_analog(readADC, 220, 25); // Report Y-axis data
 51a:	49 e1       	ldi	r20, 0x19	; 25
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	6c ed       	ldi	r22, 0xDC	; 220
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	0e 94 23 02 	call	0x446	; 0x446 <rescale_analog>
 526:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <reportHIDData+0x1>

	ADMUX |= 0x01; // Set MUX channel to A1
 52a:	ec e7       	ldi	r30, 0x7C	; 124
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	81 60       	ori	r24, 0x01	; 1
 532:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Get converting
 534:	88 81       	ld	r24, Y
 536:	80 64       	ori	r24, 0x40	; 64
 538:	88 83       	st	Y, r24
	while(!(ADCSRA & (1<<ADIF)));
 53a:	ea e7       	ldi	r30, 0x7A	; 122
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	84 ff       	sbrs	r24, 4
 542:	fd cf       	rjmp	.-6      	; 0x53e <getStick+0x54>
	ADCSRA |= (1 << ADIF);
 544:	ca e7       	ldi	r28, 0x7A	; 122
 546:	d0 e0       	ldi	r29, 0x00	; 0
 548:	88 81       	ld	r24, Y
 54a:	80 61       	ori	r24, 0x10	; 16
 54c:	88 83       	st	Y, r24
	readADC = ADC;
 54e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 552:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	reportHIDData[0] = rescale_analog(readADC, 210, 23) * -1; // Report X-axis data
 556:	47 e1       	ldi	r20, 0x17	; 23
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	62 ed       	ldi	r22, 0xD2	; 210
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	0e 94 23 02 	call	0x446	; 0x446 <rescale_analog>
 562:	81 95       	neg	r24
 564:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <reportHIDData>
	
	ADMUX = (ADMUX & 0xF0) | 0x02; // Set MUX channel to A2
 568:	ec e7       	ldi	r30, 0x7C	; 124
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	80 7f       	andi	r24, 0xF0	; 240
 570:	82 60       	ori	r24, 0x02	; 2
 572:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); // Get converting
 574:	88 81       	ld	r24, Y
 576:	80 64       	ori	r24, 0x40	; 64
 578:	88 83       	st	Y, r24
	while(!(ADCSRA & (1<<ADIF)));
 57a:	ea e7       	ldi	r30, 0x7A	; 122
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	84 ff       	sbrs	r24, 4
 582:	fd cf       	rjmp	.-6      	; 0x57e <getStick+0x94>
	ADCSRA |= (1 << ADIF);
 584:	ea e7       	ldi	r30, 0x7A	; 122
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	80 61       	ori	r24, 0x10	; 16
 58c:	80 83       	st	Z, r24
	readADC = ADC;
 58e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 592:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	reportHIDData[2] = rescale_analog(readADC, 230, 31) *-1; // Report Z-axis data
 596:	4f e1       	ldi	r20, 0x1F	; 31
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	66 ee       	ldi	r22, 0xE6	; 230
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	0e 94 23 02 	call	0x446	; 0x446 <rescale_analog>
 5a2:	81 95       	neg	r24
 5a4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <reportHIDData+0x2>
}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	08 95       	ret

000005ae <main>:
	return 0;   /* default for not implemented requests: return no data back to host */
}

int main(void)
{
	hwInit();
 5ae:	0e 94 0a 02 	call	0x414	; 0x414 <hwInit>
	uint16_t cc;
	
	cli();
 5b2:	f8 94       	cli
	
	usbInit();
 5b4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <usbInit>
	usbDeviceDisconnect();	/* enforce re-enumeration, do this while interrupts are disabled! */
 5b8:	54 98       	cbi	0x0a, 4	; 10
 5ba:	5c 98       	cbi	0x0b, 4	; 11
 5bc:	85 e6       	ldi	r24, 0x65	; 101
 5be:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c0:	ef e1       	ldi	r30, 0x1F	; 31
 5c2:	fe e4       	ldi	r31, 0x4E	; 78
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <main+0x16>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x1c>
 5ca:	00 00       	nop
 5cc:	01 97       	sbiw	r24, 0x01	; 1
	for(cc=0; cc <= 100; cc++)
 5ce:	c1 f7       	brne	.-16     	; 0x5c0 <main+0x12>
	{
		_delay_ms(5);
	}
	usbDeviceConnect();
 5d0:	54 9a       	sbi	0x0a, 4	; 10
 5d2:	5c 9a       	sbi	0x0b, 4	; 11
	sei();
 5d4:	78 94       	sei
	
	while (1)
	{
		getStick(); // Read analog joystick values
		reportHIDData[3] = ~((PINB & 0x1F) | ((PIND & 0x80)>>2)); // Read button values
 5d6:	c3 e0       	ldi	r28, 0x03	; 3
 5d8:	d1 e0       	ldi	r29, 0x01	; 1
		usbPoll();
		if(usbInterruptIsReady())
 5da:	03 e1       	ldi	r16, 0x13	; 19
 5dc:	11 e0       	ldi	r17, 0x01	; 1
	usbDeviceConnect();
	sei();
	
	while (1)
	{
		getStick(); // Read analog joystick values
 5de:	0e 94 75 02 	call	0x4ea	; 0x4ea <getStick>
		reportHIDData[3] = ~((PINB & 0x1F) | ((PIND & 0x80)>>2)); // Read button values
 5e2:	23 b1       	in	r18, 0x03	; 3
 5e4:	99 b1       	in	r25, 0x09	; 9
 5e6:	90 78       	andi	r25, 0x80	; 128
 5e8:	89 2f       	mov	r24, r25
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	95 95       	asr	r25
 5ee:	87 95       	ror	r24
 5f0:	95 95       	asr	r25
 5f2:	87 95       	ror	r24
 5f4:	92 2f       	mov	r25, r18
 5f6:	9f 71       	andi	r25, 0x1F	; 31
 5f8:	89 2b       	or	r24, r25
 5fa:	80 95       	com	r24
 5fc:	8b 83       	std	Y+3, r24	; 0x03
		usbPoll();
 5fe:	0e 94 2d 03 	call	0x65a	; 0x65a <usbPoll>
		if(usbInterruptIsReady())
 602:	f8 01       	movw	r30, r16
 604:	80 81       	ld	r24, Z
 606:	84 ff       	sbrs	r24, 4
 608:	ea cf       	rjmp	.-44     	; 0x5de <main+0x30>
		{
			// called after every poll of the interrupt endpoint
			{
				usbSetInterrupt( reportHIDData, sizeof reportHIDData );
 60a:	64 e0       	ldi	r22, 0x04	; 4
 60c:	ce 01       	movw	r24, r28
 60e:	0e 94 0a 03 	call	0x614	; 0x614 <usbSetInterrupt>
 612:	e5 cf       	rjmp	.-54     	; 0x5de <main+0x30>

00000614 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 614:	cf 93       	push	r28
 616:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 618:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <usbTxStatus1>
 61c:	24 ff       	sbrs	r18, 4
 61e:	07 c0       	rjmp	.+14     	; 0x62e <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 620:	e3 e1       	ldi	r30, 0x13	; 19
 622:	f1 e0       	ldi	r31, 0x01	; 1
 624:	31 81       	ldd	r19, Z+1	; 0x01
 626:	28 e8       	ldi	r18, 0x88	; 136
 628:	23 27       	eor	r18, r19
 62a:	21 83       	std	Z+1, r18	; 0x01
 62c:	03 c0       	rjmp	.+6      	; 0x634 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 62e:	2a e5       	ldi	r18, 0x5A	; 90
 630:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <usbTxStatus1>
 634:	e8 2f       	mov	r30, r24
 636:	f9 2f       	mov	r31, r25
 638:	a5 e1       	ldi	r26, 0x15	; 21
 63a:	b1 e0       	ldi	r27, 0x01	; 1
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 63c:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 63e:	91 91       	ld	r25, Z+
 640:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 642:	81 50       	subi	r24, 0x01	; 1
 644:	e1 f7       	brne	.-8      	; 0x63e <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 646:	6c 2f       	mov	r22, r28
 648:	85 e1       	ldi	r24, 0x15	; 21
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 c0 00 	call	0x180	; 0x180 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 650:	cc 5f       	subi	r28, 0xFC	; 252
 652:	c0 93 13 01 	sts	0x0113, r28	; 0x800113 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 65e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <usbRxLen>
 662:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 664:	0a f4       	brpl	.+2      	; 0x668 <usbPoll+0xe>
 666:	b5 c0       	rjmp	.+362    	; 0x7d2 <usbPoll+0x178>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 668:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <usbRxToken>
 66c:	9d 32       	cpi	r25, 0x2D	; 45
 66e:	09 f0       	breq	.+2      	; 0x672 <usbPoll+0x18>
 670:	ae c0       	rjmp	.+348    	; 0x7ce <usbPoll+0x174>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 672:	88 30       	cpi	r24, 0x08	; 8
 674:	09 f0       	breq	.+2      	; 0x678 <usbPoll+0x1e>
 676:	ab c0       	rjmp	.+342    	; 0x7ce <usbPoll+0x174>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 678:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <usbInputBufOffset>
 67c:	cc e0       	ldi	r28, 0x0C	; 12
 67e:	d0 e0       	ldi	r29, 0x00	; 0
 680:	c8 1b       	sub	r28, r24
 682:	d1 09       	sbc	r29, r1
 684:	c8 5d       	subi	r28, 0xD8	; 216
 686:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 688:	83 ec       	ldi	r24, 0xC3	; 195
 68a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 68e:	8a e5       	ldi	r24, 0x5A	; 90
 690:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <usbTxLen>
        usbMsgFlags = 0;
 694:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 698:	88 81       	ld	r24, Y
 69a:	80 76       	andi	r24, 0x60	; 96
 69c:	21 f0       	breq	.+8      	; 0x6a6 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 69e:	ce 01       	movw	r24, r28
 6a0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <usbFunctionSetup>
 6a4:	8b c0       	rjmp	.+278    	; 0x7bc <usbPoll+0x162>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6a8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6ae:	81 11       	cpse	r24, r1
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6b2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6b6:	21 e1       	ldi	r18, 0x11	; 17
 6b8:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	7b c0       	rjmp	.+246    	; 0x7b4 <usbPoll+0x15a>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 6be:	85 30       	cpi	r24, 0x05	; 5
 6c0:	31 f4       	brne	.+12     	; 0x6ce <usbPoll+0x74>
        usbNewDeviceAddr = value;
 6c2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6c6:	21 e1       	ldi	r18, 0x11	; 17
 6c8:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	73 c0       	rjmp	.+230    	; 0x7b4 <usbPoll+0x15a>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 6ce:	86 30       	cpi	r24, 0x06	; 6
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <usbPoll+0x7a>
 6d2:	50 c0       	rjmp	.+160    	; 0x774 <usbPoll+0x11a>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	41 f4       	brne	.+16     	; 0x6ea <usbPoll+0x90>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 6da:	8c eb       	ldi	r24, 0xBC	; 188
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 6e2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 6e6:	82 e1       	ldi	r24, 0x12	; 18
 6e8:	41 c0       	rjmp	.+130    	; 0x76c <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	41 f4       	brne	.+16     	; 0x6fe <usbPoll+0xa4>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 6ee:	8a e9       	ldi	r24, 0x9A	; 154
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 6f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 6fa:	82 e2       	ldi	r24, 0x22	; 34
 6fc:	37 c0       	rjmp	.+110    	; 0x76c <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	f1 f4       	brne	.+60     	; 0x73e <usbPoll+0xe4>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 702:	91 11       	cpse	r25, r1
 704:	08 c0       	rjmp	.+16     	; 0x716 <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 706:	84 e1       	ldi	r24, 0x14	; 20
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 70e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 712:	84 e0       	ldi	r24, 0x04	; 4
 714:	2b c0       	rjmp	.+86     	; 0x76c <usbPoll+0x112>
        SWITCH_CASE(1)
 716:	91 30       	cpi	r25, 0x01	; 1
 718:	41 f4       	brne	.+16     	; 0x72a <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 71a:	8e ee       	ldi	r24, 0xEE	; 238
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 722:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 726:	86 e2       	ldi	r24, 0x26	; 38
 728:	21 c0       	rjmp	.+66     	; 0x76c <usbPoll+0x112>
        SWITCH_CASE(2)
 72a:	92 30       	cpi	r25, 0x02	; 2
 72c:	e1 f4       	brne	.+56     	; 0x766 <usbPoll+0x10c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 72e:	8e ec       	ldi	r24, 0xCE	; 206
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 736:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 73a:	80 e2       	ldi	r24, 0x20	; 32
 73c:	17 c0       	rjmp	.+46     	; 0x76c <usbPoll+0x112>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 73e:	81 32       	cpi	r24, 0x21	; 33
 740:	41 f4       	brne	.+16     	; 0x752 <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 742:	8c ea       	ldi	r24, 0xAC	; 172
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 74a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 74e:	89 e0       	ldi	r24, 0x09	; 9
 750:	0d c0       	rjmp	.+26     	; 0x76c <usbPoll+0x112>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 752:	82 32       	cpi	r24, 0x22	; 34
 754:	51 f4       	brne	.+20     	; 0x76a <usbPoll+0x110>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 756:	88 e6       	ldi	r24, 0x68	; 104
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <usbMsgPtr+0x1>
 75e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <usbMsgPtr>
 762:	82 e3       	ldi	r24, 0x32	; 50
 764:	03 c0       	rjmp	.+6      	; 0x76c <usbPoll+0x112>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	01 c0       	rjmp	.+2      	; 0x76c <usbPoll+0x112>
 76a:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 76c:	90 e4       	ldi	r25, 0x40	; 64
 76e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
 772:	24 c0       	rjmp	.+72     	; 0x7bc <usbPoll+0x162>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 774:	88 30       	cpi	r24, 0x08	; 8
 776:	99 f0       	breq	.+38     	; 0x79e <usbPoll+0x144>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 778:	89 30       	cpi	r24, 0x09	; 9
 77a:	31 f4       	brne	.+12     	; 0x788 <usbPoll+0x12e>
        usbConfiguration = value;
 77c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 780:	21 e1       	ldi	r18, 0x11	; 17
 782:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	16 c0       	rjmp	.+44     	; 0x7b4 <usbPoll+0x15a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 788:	8a 30       	cpi	r24, 0x0A	; 10
 78a:	69 f0       	breq	.+26     	; 0x7a6 <usbPoll+0x14c>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 78c:	8b 30       	cpi	r24, 0x0B	; 11
 78e:	79 f4       	brne	.+30     	; 0x7ae <usbPoll+0x154>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 790:	8b e4       	ldi	r24, 0x4B	; 75
 792:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 796:	21 e1       	ldi	r18, 0x11	; 17
 798:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	0b c0       	rjmp	.+22     	; 0x7b4 <usbPoll+0x15a>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 79e:	27 e2       	ldi	r18, 0x27	; 39
 7a0:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <usbPoll+0x15a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7a6:	21 e1       	ldi	r18, 0x11	; 17
 7a8:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <usbPoll+0x15a>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7ae:	21 e1       	ldi	r18, 0x11	; 17
 7b0:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7b2:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 7b4:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <usbMsgPtr+0x1>
 7b8:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7bc:	9f 81       	ldd	r25, Y+7	; 0x07
 7be:	91 11       	cpse	r25, r1
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <usbPoll+0x170>
 7c2:	9e 81       	ldd	r25, Y+6	; 0x06
 7c4:	98 17       	cp	r25, r24
 7c6:	08 f4       	brcc	.+2      	; 0x7ca <usbPoll+0x170>
 7c8:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 7ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 7ce:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 7d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <usbTxLen>
 7d6:	84 ff       	sbrs	r24, 4
 7d8:	4c c0       	rjmp	.+152    	; 0x872 <usbPoll+0x218>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 7da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 7de:	8f 3f       	cpi	r24, 0xFF	; 255
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <usbPoll+0x18a>
 7e2:	47 c0       	rjmp	.+142    	; 0x872 <usbPoll+0x218>
 7e4:	c8 2f       	mov	r28, r24
 7e6:	89 30       	cpi	r24, 0x09	; 9
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <usbPoll+0x192>
 7ea:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 7ec:	8c 1b       	sub	r24, r28
 7ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 7f2:	e8 e0       	ldi	r30, 0x08	; 8
 7f4:	f1 e0       	ldi	r31, 0x01	; 1
 7f6:	90 81       	ld	r25, Z
 7f8:	88 e8       	ldi	r24, 0x88	; 136
 7fa:	89 27       	eor	r24, r25
 7fc:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 7fe:	cc 23       	and	r28, r28
 800:	09 f4       	brne	.+2      	; 0x804 <usbPoll+0x1aa>
 802:	45 c0       	rjmp	.+138    	; 0x88e <usbPoll+0x234>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 804:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <usbMsgPtr>
 808:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 80c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 810:	86 ff       	sbrs	r24, 6
 812:	10 c0       	rjmp	.+32     	; 0x834 <usbPoll+0x1da>
 814:	a9 e0       	ldi	r26, 0x09	; 9
 816:	b1 e0       	ldi	r27, 0x01	; 1
 818:	f9 01       	movw	r30, r18
 81a:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 81c:	94 91       	lpm	r25, Z
                    *data++ = c;
 81e:	9d 93       	st	X+, r25
                    r++;
 820:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 822:	81 50       	subi	r24, 0x01	; 1
 824:	d9 f7       	brne	.-10     	; 0x81c <usbPoll+0x1c2>
 826:	2f 5f       	subi	r18, 0xFF	; 255
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	8c 0f       	add	r24, r28
 82e:	28 0f       	add	r18, r24
 830:	31 1d       	adc	r19, r1
 832:	0e c0       	rjmp	.+28     	; 0x850 <usbPoll+0x1f6>
 834:	a9 e0       	ldi	r26, 0x09	; 9
 836:	b1 e0       	ldi	r27, 0x01	; 1
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 838:	f9 01       	movw	r30, r18
 83a:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 83c:	91 91       	ld	r25, Z+
 83e:	9d 93       	st	X+, r25
                    r++;
                }while(--i);
 840:	81 50       	subi	r24, 0x01	; 1
 842:	e1 f7       	brne	.-8      	; 0x83c <usbPoll+0x1e2>
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	8f ef       	ldi	r24, 0xFF	; 255
 84a:	8c 0f       	add	r24, r28
 84c:	28 0f       	add	r18, r24
 84e:	31 1d       	adc	r19, r1
            }
            usbMsgPtr = r;
 850:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <usbMsgPtr+0x1>
 854:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 858:	6c 2f       	mov	r22, r28
 85a:	89 e0       	ldi	r24, 0x09	; 9
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	0e 94 c0 00 	call	0x180	; 0x180 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 862:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 864:	cc 30       	cpi	r28, 0x0C	; 12
 866:	18 f4       	brcc	.+6      	; 0x86e <usbPoll+0x214>
            usbMsgLen = USB_NO_MSG;
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 86e:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 872:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 874:	8c 70       	andi	r24, 0x0C	; 12
 876:	91 f4       	brne	.+36     	; 0x89c <usbPoll+0x242>
 878:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 87a:	89 b1       	in	r24, 0x09	; 9
        if(usbLineStatus != 0)  /* SE0 has ended */
 87c:	8c 70       	andi	r24, 0x0C	; 12
 87e:	71 f4       	brne	.+28     	; 0x89c <usbPoll+0x242>
 880:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 882:	d9 f7       	brne	.-10     	; 0x87a <usbPoll+0x220>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 884:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 888:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <usbDeviceAddr>
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 88c:	07 c0       	rjmp	.+14     	; 0x89c <usbPoll+0x242>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 88e:	6c 2f       	mov	r22, r28
 890:	89 e0       	ldi	r24, 0x09	; 9
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 c0 00 	call	0x180	; 0x180 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 898:	cc 5f       	subi	r28, 0xFC	; 252
 89a:	e6 cf       	rjmp	.-52     	; 0x868 <usbPoll+0x20e>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 8a2:	e9 e6       	ldi	r30, 0x69	; 105
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	82 60       	ori	r24, 0x02	; 2
 8aa:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 8ac:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 8ae:	e3 e1       	ldi	r30, 0x13	; 19
 8b0:	f1 e0       	ldi	r31, 0x01	; 1
 8b2:	8b e4       	ldi	r24, 0x4B	; 75
 8b4:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 8b6:	8a e5       	ldi	r24, 0x5A	; 90
 8b8:	80 83       	st	Z, r24
 8ba:	08 95       	ret

000008bc <__divsf3>:
 8bc:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__divsf3x>
 8c0:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 8c4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 8c8:	58 f0       	brcs	.+22     	; 0x8e0 <__divsf3+0x24>
 8ca:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 8ce:	40 f0       	brcs	.+16     	; 0x8e0 <__divsf3+0x24>
 8d0:	29 f4       	brne	.+10     	; 0x8dc <__divsf3+0x20>
 8d2:	5f 3f       	cpi	r21, 0xFF	; 255
 8d4:	29 f0       	breq	.+10     	; 0x8e0 <__divsf3+0x24>
 8d6:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 8da:	51 11       	cpse	r21, r1
 8dc:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 8e0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>

000008e4 <__divsf3x>:
 8e4:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 8e8:	68 f3       	brcs	.-38     	; 0x8c4 <__divsf3+0x8>

000008ea <__divsf3_pse>:
 8ea:	99 23       	and	r25, r25
 8ec:	b1 f3       	breq	.-20     	; 0x8da <__divsf3+0x1e>
 8ee:	55 23       	and	r21, r21
 8f0:	91 f3       	breq	.-28     	; 0x8d6 <__divsf3+0x1a>
 8f2:	95 1b       	sub	r25, r21
 8f4:	55 0b       	sbc	r21, r21
 8f6:	bb 27       	eor	r27, r27
 8f8:	aa 27       	eor	r26, r26
 8fa:	62 17       	cp	r22, r18
 8fc:	73 07       	cpc	r23, r19
 8fe:	84 07       	cpc	r24, r20
 900:	38 f0       	brcs	.+14     	; 0x910 <__stack+0x11>
 902:	9f 5f       	subi	r25, 0xFF	; 255
 904:	5f 4f       	sbci	r21, 0xFF	; 255
 906:	22 0f       	add	r18, r18
 908:	33 1f       	adc	r19, r19
 90a:	44 1f       	adc	r20, r20
 90c:	aa 1f       	adc	r26, r26
 90e:	a9 f3       	breq	.-22     	; 0x8fa <__divsf3_pse+0x10>
 910:	35 d0       	rcall	.+106    	; 0x97c <__stack+0x7d>
 912:	0e 2e       	mov	r0, r30
 914:	3a f0       	brmi	.+14     	; 0x924 <__stack+0x25>
 916:	e0 e8       	ldi	r30, 0x80	; 128
 918:	32 d0       	rcall	.+100    	; 0x97e <__stack+0x7f>
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	e6 95       	lsr	r30
 920:	00 1c       	adc	r0, r0
 922:	ca f7       	brpl	.-14     	; 0x916 <__stack+0x17>
 924:	2b d0       	rcall	.+86     	; 0x97c <__stack+0x7d>
 926:	fe 2f       	mov	r31, r30
 928:	29 d0       	rcall	.+82     	; 0x97c <__stack+0x7d>
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	bb 1f       	adc	r27, r27
 932:	26 17       	cp	r18, r22
 934:	37 07       	cpc	r19, r23
 936:	48 07       	cpc	r20, r24
 938:	ab 07       	cpc	r26, r27
 93a:	b0 e8       	ldi	r27, 0x80	; 128
 93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0x41>
 93e:	bb 0b       	sbc	r27, r27
 940:	80 2d       	mov	r24, r0
 942:	bf 01       	movw	r22, r30
 944:	ff 27       	eor	r31, r31
 946:	93 58       	subi	r25, 0x83	; 131
 948:	5f 4f       	sbci	r21, 0xFF	; 255
 94a:	3a f0       	brmi	.+14     	; 0x95a <__stack+0x5b>
 94c:	9e 3f       	cpi	r25, 0xFE	; 254
 94e:	51 05       	cpc	r21, r1
 950:	78 f0       	brcs	.+30     	; 0x970 <__stack+0x71>
 952:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 956:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 95a:	5f 3f       	cpi	r21, 0xFF	; 255
 95c:	e4 f3       	brlt	.-8      	; 0x956 <__stack+0x57>
 95e:	98 3e       	cpi	r25, 0xE8	; 232
 960:	d4 f3       	brlt	.-12     	; 0x956 <__stack+0x57>
 962:	86 95       	lsr	r24
 964:	77 95       	ror	r23
 966:	67 95       	ror	r22
 968:	b7 95       	ror	r27
 96a:	f7 95       	ror	r31
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	c9 f7       	brne	.-14     	; 0x962 <__stack+0x63>
 970:	88 0f       	add	r24, r24
 972:	91 1d       	adc	r25, r1
 974:	96 95       	lsr	r25
 976:	87 95       	ror	r24
 978:	97 f9       	bld	r25, 7
 97a:	08 95       	ret
 97c:	e1 e0       	ldi	r30, 0x01	; 1
 97e:	66 0f       	add	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	bb 1f       	adc	r27, r27
 986:	62 17       	cp	r22, r18
 988:	73 07       	cpc	r23, r19
 98a:	84 07       	cpc	r24, r20
 98c:	ba 07       	cpc	r27, r26
 98e:	20 f0       	brcs	.+8      	; 0x998 <__stack+0x99>
 990:	62 1b       	sub	r22, r18
 992:	73 0b       	sbc	r23, r19
 994:	84 0b       	sbc	r24, r20
 996:	ba 0b       	sbc	r27, r26
 998:	ee 1f       	adc	r30, r30
 99a:	88 f7       	brcc	.-30     	; 0x97e <__stack+0x7f>
 99c:	e0 95       	com	r30
 99e:	08 95       	ret

000009a0 <__fixsfsi>:
 9a0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixunssfsi>
 9a4:	68 94       	set
 9a6:	b1 11       	cpse	r27, r1
 9a8:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 9ac:	08 95       	ret

000009ae <__fixunssfsi>:
 9ae:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 9b2:	88 f0       	brcs	.+34     	; 0x9d6 <__fixunssfsi+0x28>
 9b4:	9f 57       	subi	r25, 0x7F	; 127
 9b6:	98 f0       	brcs	.+38     	; 0x9de <__fixunssfsi+0x30>
 9b8:	b9 2f       	mov	r27, r25
 9ba:	99 27       	eor	r25, r25
 9bc:	b7 51       	subi	r27, 0x17	; 23
 9be:	b0 f0       	brcs	.+44     	; 0x9ec <__fixunssfsi+0x3e>
 9c0:	e1 f0       	breq	.+56     	; 0x9fa <__fixunssfsi+0x4c>
 9c2:	66 0f       	add	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	1a f0       	brmi	.+6      	; 0x9d2 <__fixunssfsi+0x24>
 9cc:	ba 95       	dec	r27
 9ce:	c9 f7       	brne	.-14     	; 0x9c2 <__fixunssfsi+0x14>
 9d0:	14 c0       	rjmp	.+40     	; 0x9fa <__fixunssfsi+0x4c>
 9d2:	b1 30       	cpi	r27, 0x01	; 1
 9d4:	91 f0       	breq	.+36     	; 0x9fa <__fixunssfsi+0x4c>
 9d6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <__fp_zero>
 9da:	b1 e0       	ldi	r27, 0x01	; 1
 9dc:	08 95       	ret
 9de:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__fp_zero>
 9e2:	67 2f       	mov	r22, r23
 9e4:	78 2f       	mov	r23, r24
 9e6:	88 27       	eor	r24, r24
 9e8:	b8 5f       	subi	r27, 0xF8	; 248
 9ea:	39 f0       	breq	.+14     	; 0x9fa <__fixunssfsi+0x4c>
 9ec:	b9 3f       	cpi	r27, 0xF9	; 249
 9ee:	cc f3       	brlt	.-14     	; 0x9e2 <__fixunssfsi+0x34>
 9f0:	86 95       	lsr	r24
 9f2:	77 95       	ror	r23
 9f4:	67 95       	ror	r22
 9f6:	b3 95       	inc	r27
 9f8:	d9 f7       	brne	.-10     	; 0x9f0 <__fixunssfsi+0x42>
 9fa:	3e f4       	brtc	.+14     	; 0xa0a <__fixunssfsi+0x5c>
 9fc:	90 95       	com	r25
 9fe:	80 95       	com	r24
 a00:	70 95       	com	r23
 a02:	61 95       	neg	r22
 a04:	7f 4f       	sbci	r23, 0xFF	; 255
 a06:	8f 4f       	sbci	r24, 0xFF	; 255
 a08:	9f 4f       	sbci	r25, 0xFF	; 255
 a0a:	08 95       	ret

00000a0c <__floatunsisf>:
 a0c:	e8 94       	clt
 a0e:	09 c0       	rjmp	.+18     	; 0xa22 <__floatsisf+0x12>

00000a10 <__floatsisf>:
 a10:	97 fb       	bst	r25, 7
 a12:	3e f4       	brtc	.+14     	; 0xa22 <__floatsisf+0x12>
 a14:	90 95       	com	r25
 a16:	80 95       	com	r24
 a18:	70 95       	com	r23
 a1a:	61 95       	neg	r22
 a1c:	7f 4f       	sbci	r23, 0xFF	; 255
 a1e:	8f 4f       	sbci	r24, 0xFF	; 255
 a20:	9f 4f       	sbci	r25, 0xFF	; 255
 a22:	99 23       	and	r25, r25
 a24:	a9 f0       	breq	.+42     	; 0xa50 <__floatsisf+0x40>
 a26:	f9 2f       	mov	r31, r25
 a28:	96 e9       	ldi	r25, 0x96	; 150
 a2a:	bb 27       	eor	r27, r27
 a2c:	93 95       	inc	r25
 a2e:	f6 95       	lsr	r31
 a30:	87 95       	ror	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f1 11       	cpse	r31, r1
 a3a:	f8 cf       	rjmp	.-16     	; 0xa2c <__floatsisf+0x1c>
 a3c:	fa f4       	brpl	.+62     	; 0xa7c <__floatsisf+0x6c>
 a3e:	bb 0f       	add	r27, r27
 a40:	11 f4       	brne	.+4      	; 0xa46 <__floatsisf+0x36>
 a42:	60 ff       	sbrs	r22, 0
 a44:	1b c0       	rjmp	.+54     	; 0xa7c <__floatsisf+0x6c>
 a46:	6f 5f       	subi	r22, 0xFF	; 255
 a48:	7f 4f       	sbci	r23, 0xFF	; 255
 a4a:	8f 4f       	sbci	r24, 0xFF	; 255
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	16 c0       	rjmp	.+44     	; 0xa7c <__floatsisf+0x6c>
 a50:	88 23       	and	r24, r24
 a52:	11 f0       	breq	.+4      	; 0xa58 <__floatsisf+0x48>
 a54:	96 e9       	ldi	r25, 0x96	; 150
 a56:	11 c0       	rjmp	.+34     	; 0xa7a <__floatsisf+0x6a>
 a58:	77 23       	and	r23, r23
 a5a:	21 f0       	breq	.+8      	; 0xa64 <__floatsisf+0x54>
 a5c:	9e e8       	ldi	r25, 0x8E	; 142
 a5e:	87 2f       	mov	r24, r23
 a60:	76 2f       	mov	r23, r22
 a62:	05 c0       	rjmp	.+10     	; 0xa6e <__floatsisf+0x5e>
 a64:	66 23       	and	r22, r22
 a66:	71 f0       	breq	.+28     	; 0xa84 <__floatsisf+0x74>
 a68:	96 e8       	ldi	r25, 0x86	; 134
 a6a:	86 2f       	mov	r24, r22
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	2a f0       	brmi	.+10     	; 0xa7c <__floatsisf+0x6c>
 a72:	9a 95       	dec	r25
 a74:	66 0f       	add	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	da f7       	brpl	.-10     	; 0xa72 <__floatsisf+0x62>
 a7c:	88 0f       	add	r24, r24
 a7e:	96 95       	lsr	r25
 a80:	87 95       	ror	r24
 a82:	97 f9       	bld	r25, 7
 a84:	08 95       	ret

00000a86 <__fp_inf>:
 a86:	97 f9       	bld	r25, 7
 a88:	9f 67       	ori	r25, 0x7F	; 127
 a8a:	80 e8       	ldi	r24, 0x80	; 128
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	60 e0       	ldi	r22, 0x00	; 0
 a90:	08 95       	ret

00000a92 <__fp_nan>:
 a92:	9f ef       	ldi	r25, 0xFF	; 255
 a94:	80 ec       	ldi	r24, 0xC0	; 192
 a96:	08 95       	ret

00000a98 <__fp_pscA>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	16 16       	cp	r1, r22
 a9e:	17 06       	cpc	r1, r23
 aa0:	18 06       	cpc	r1, r24
 aa2:	09 06       	cpc	r0, r25
 aa4:	08 95       	ret

00000aa6 <__fp_pscB>:
 aa6:	00 24       	eor	r0, r0
 aa8:	0a 94       	dec	r0
 aaa:	12 16       	cp	r1, r18
 aac:	13 06       	cpc	r1, r19
 aae:	14 06       	cpc	r1, r20
 ab0:	05 06       	cpc	r0, r21
 ab2:	08 95       	ret

00000ab4 <__fp_round>:
 ab4:	09 2e       	mov	r0, r25
 ab6:	03 94       	inc	r0
 ab8:	00 0c       	add	r0, r0
 aba:	11 f4       	brne	.+4      	; 0xac0 <__fp_round+0xc>
 abc:	88 23       	and	r24, r24
 abe:	52 f0       	brmi	.+20     	; 0xad4 <__fp_round+0x20>
 ac0:	bb 0f       	add	r27, r27
 ac2:	40 f4       	brcc	.+16     	; 0xad4 <__fp_round+0x20>
 ac4:	bf 2b       	or	r27, r31
 ac6:	11 f4       	brne	.+4      	; 0xacc <__fp_round+0x18>
 ac8:	60 ff       	sbrs	r22, 0
 aca:	04 c0       	rjmp	.+8      	; 0xad4 <__fp_round+0x20>
 acc:	6f 5f       	subi	r22, 0xFF	; 255
 ace:	7f 4f       	sbci	r23, 0xFF	; 255
 ad0:	8f 4f       	sbci	r24, 0xFF	; 255
 ad2:	9f 4f       	sbci	r25, 0xFF	; 255
 ad4:	08 95       	ret

00000ad6 <__fp_split3>:
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	90 58       	subi	r25, 0x80	; 128
 ada:	44 0f       	add	r20, r20
 adc:	55 1f       	adc	r21, r21
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__fp_splitA+0x10>
 ae0:	5f 3f       	cpi	r21, 0xFF	; 255
 ae2:	71 f0       	breq	.+28     	; 0xb00 <__fp_splitA+0x1a>
 ae4:	47 95       	ror	r20

00000ae6 <__fp_splitA>:
 ae6:	88 0f       	add	r24, r24
 ae8:	97 fb       	bst	r25, 7
 aea:	99 1f       	adc	r25, r25
 aec:	61 f0       	breq	.+24     	; 0xb06 <__fp_splitA+0x20>
 aee:	9f 3f       	cpi	r25, 0xFF	; 255
 af0:	79 f0       	breq	.+30     	; 0xb10 <__fp_splitA+0x2a>
 af2:	87 95       	ror	r24
 af4:	08 95       	ret
 af6:	12 16       	cp	r1, r18
 af8:	13 06       	cpc	r1, r19
 afa:	14 06       	cpc	r1, r20
 afc:	55 1f       	adc	r21, r21
 afe:	f2 cf       	rjmp	.-28     	; 0xae4 <__fp_split3+0xe>
 b00:	46 95       	lsr	r20
 b02:	f1 df       	rcall	.-30     	; 0xae6 <__fp_splitA>
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <__fp_splitA+0x30>
 b06:	16 16       	cp	r1, r22
 b08:	17 06       	cpc	r1, r23
 b0a:	18 06       	cpc	r1, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	f1 cf       	rjmp	.-30     	; 0xaf2 <__fp_splitA+0xc>
 b10:	86 95       	lsr	r24
 b12:	71 05       	cpc	r23, r1
 b14:	61 05       	cpc	r22, r1
 b16:	08 94       	sec
 b18:	08 95       	ret

00000b1a <__fp_zero>:
 b1a:	e8 94       	clt

00000b1c <__fp_szero>:
 b1c:	bb 27       	eor	r27, r27
 b1e:	66 27       	eor	r22, r22
 b20:	77 27       	eor	r23, r23
 b22:	cb 01       	movw	r24, r22
 b24:	97 f9       	bld	r25, 7
 b26:	08 95       	ret

00000b28 <__mulsf3>:
 b28:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__mulsf3x>
 b2c:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__fp_round>
 b30:	0e 94 4c 05 	call	0xa98	; 0xa98 <__fp_pscA>
 b34:	38 f0       	brcs	.+14     	; 0xb44 <__mulsf3+0x1c>
 b36:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscB>
 b3a:	20 f0       	brcs	.+8      	; 0xb44 <__mulsf3+0x1c>
 b3c:	95 23       	and	r25, r21
 b3e:	11 f0       	breq	.+4      	; 0xb44 <__mulsf3+0x1c>
 b40:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 b44:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_nan>
 b48:	11 24       	eor	r1, r1
 b4a:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>

00000b4e <__mulsf3x>:
 b4e:	0e 94 6b 05 	call	0xad6	; 0xad6 <__fp_split3>
 b52:	70 f3       	brcs	.-36     	; 0xb30 <__mulsf3+0x8>

00000b54 <__mulsf3_pse>:
 b54:	95 9f       	mul	r25, r21
 b56:	c1 f3       	breq	.-16     	; 0xb48 <__mulsf3+0x20>
 b58:	95 0f       	add	r25, r21
 b5a:	50 e0       	ldi	r21, 0x00	; 0
 b5c:	55 1f       	adc	r21, r21
 b5e:	62 9f       	mul	r22, r18
 b60:	f0 01       	movw	r30, r0
 b62:	72 9f       	mul	r23, r18
 b64:	bb 27       	eor	r27, r27
 b66:	f0 0d       	add	r31, r0
 b68:	b1 1d       	adc	r27, r1
 b6a:	63 9f       	mul	r22, r19
 b6c:	aa 27       	eor	r26, r26
 b6e:	f0 0d       	add	r31, r0
 b70:	b1 1d       	adc	r27, r1
 b72:	aa 1f       	adc	r26, r26
 b74:	64 9f       	mul	r22, r20
 b76:	66 27       	eor	r22, r22
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	66 1f       	adc	r22, r22
 b7e:	82 9f       	mul	r24, r18
 b80:	22 27       	eor	r18, r18
 b82:	b0 0d       	add	r27, r0
 b84:	a1 1d       	adc	r26, r1
 b86:	62 1f       	adc	r22, r18
 b88:	73 9f       	mul	r23, r19
 b8a:	b0 0d       	add	r27, r0
 b8c:	a1 1d       	adc	r26, r1
 b8e:	62 1f       	adc	r22, r18
 b90:	83 9f       	mul	r24, r19
 b92:	a0 0d       	add	r26, r0
 b94:	61 1d       	adc	r22, r1
 b96:	22 1f       	adc	r18, r18
 b98:	74 9f       	mul	r23, r20
 b9a:	33 27       	eor	r19, r19
 b9c:	a0 0d       	add	r26, r0
 b9e:	61 1d       	adc	r22, r1
 ba0:	23 1f       	adc	r18, r19
 ba2:	84 9f       	mul	r24, r20
 ba4:	60 0d       	add	r22, r0
 ba6:	21 1d       	adc	r18, r1
 ba8:	82 2f       	mov	r24, r18
 baa:	76 2f       	mov	r23, r22
 bac:	6a 2f       	mov	r22, r26
 bae:	11 24       	eor	r1, r1
 bb0:	9f 57       	subi	r25, 0x7F	; 127
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	9a f0       	brmi	.+38     	; 0xbdc <__mulsf3_pse+0x88>
 bb6:	f1 f0       	breq	.+60     	; 0xbf4 <__mulsf3_pse+0xa0>
 bb8:	88 23       	and	r24, r24
 bba:	4a f0       	brmi	.+18     	; 0xbce <__mulsf3_pse+0x7a>
 bbc:	ee 0f       	add	r30, r30
 bbe:	ff 1f       	adc	r31, r31
 bc0:	bb 1f       	adc	r27, r27
 bc2:	66 1f       	adc	r22, r22
 bc4:	77 1f       	adc	r23, r23
 bc6:	88 1f       	adc	r24, r24
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	a9 f7       	brne	.-22     	; 0xbb8 <__mulsf3_pse+0x64>
 bce:	9e 3f       	cpi	r25, 0xFE	; 254
 bd0:	51 05       	cpc	r21, r1
 bd2:	80 f0       	brcs	.+32     	; 0xbf4 <__mulsf3_pse+0xa0>
 bd4:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__fp_inf>
 bd8:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	e4 f3       	brlt	.-8      	; 0xbd8 <__mulsf3_pse+0x84>
 be0:	98 3e       	cpi	r25, 0xE8	; 232
 be2:	d4 f3       	brlt	.-12     	; 0xbd8 <__mulsf3_pse+0x84>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	e7 95       	ror	r30
 bf0:	9f 5f       	subi	r25, 0xFF	; 255
 bf2:	c1 f7       	brne	.-16     	; 0xbe4 <__mulsf3_pse+0x90>
 bf4:	fe 2b       	or	r31, r30
 bf6:	88 0f       	add	r24, r24
 bf8:	91 1d       	adc	r25, r1
 bfa:	96 95       	lsr	r25
 bfc:	87 95       	ror	r24
 bfe:	97 f9       	bld	r25, 7
 c00:	08 95       	ret

00000c02 <round>:
 c02:	0e 94 73 05 	call	0xae6	; 0xae6 <__fp_splitA>
 c06:	e8 f0       	brcs	.+58     	; 0xc42 <round+0x40>
 c08:	9e 37       	cpi	r25, 0x7E	; 126
 c0a:	e8 f0       	brcs	.+58     	; 0xc46 <round+0x44>
 c0c:	96 39       	cpi	r25, 0x96	; 150
 c0e:	b8 f4       	brcc	.+46     	; 0xc3e <round+0x3c>
 c10:	9e 38       	cpi	r25, 0x8E	; 142
 c12:	48 f4       	brcc	.+18     	; 0xc26 <round+0x24>
 c14:	67 2f       	mov	r22, r23
 c16:	78 2f       	mov	r23, r24
 c18:	88 27       	eor	r24, r24
 c1a:	98 5f       	subi	r25, 0xF8	; 248
 c1c:	f9 cf       	rjmp	.-14     	; 0xc10 <round+0xe>
 c1e:	86 95       	lsr	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	93 95       	inc	r25
 c26:	95 39       	cpi	r25, 0x95	; 149
 c28:	d0 f3       	brcs	.-12     	; 0xc1e <round+0x1c>
 c2a:	b6 2f       	mov	r27, r22
 c2c:	b1 70       	andi	r27, 0x01	; 1
 c2e:	6b 0f       	add	r22, r27
 c30:	71 1d       	adc	r23, r1
 c32:	81 1d       	adc	r24, r1
 c34:	20 f4       	brcc	.+8      	; 0xc3e <round+0x3c>
 c36:	87 95       	ror	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	93 95       	inc	r25
 c3e:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_mintl>
 c42:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__fp_mpack>
 c46:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__fp_szero>

00000c4a <__fp_mintl>:
 c4a:	88 23       	and	r24, r24
 c4c:	71 f4       	brne	.+28     	; 0xc6a <__fp_mintl+0x20>
 c4e:	77 23       	and	r23, r23
 c50:	21 f0       	breq	.+8      	; 0xc5a <__fp_mintl+0x10>
 c52:	98 50       	subi	r25, 0x08	; 8
 c54:	87 2b       	or	r24, r23
 c56:	76 2f       	mov	r23, r22
 c58:	07 c0       	rjmp	.+14     	; 0xc68 <__fp_mintl+0x1e>
 c5a:	66 23       	and	r22, r22
 c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_mintl+0x18>
 c5e:	99 27       	eor	r25, r25
 c60:	0d c0       	rjmp	.+26     	; 0xc7c <__fp_mintl+0x32>
 c62:	90 51       	subi	r25, 0x10	; 16
 c64:	86 2b       	or	r24, r22
 c66:	70 e0       	ldi	r23, 0x00	; 0
 c68:	60 e0       	ldi	r22, 0x00	; 0
 c6a:	2a f0       	brmi	.+10     	; 0xc76 <__fp_mintl+0x2c>
 c6c:	9a 95       	dec	r25
 c6e:	66 0f       	add	r22, r22
 c70:	77 1f       	adc	r23, r23
 c72:	88 1f       	adc	r24, r24
 c74:	da f7       	brpl	.-10     	; 0xc6c <__fp_mintl+0x22>
 c76:	88 0f       	add	r24, r24
 c78:	96 95       	lsr	r25
 c7a:	87 95       	ror	r24
 c7c:	97 f9       	bld	r25, 7
 c7e:	08 95       	ret

00000c80 <__fp_mpack>:
 c80:	9f 3f       	cpi	r25, 0xFF	; 255
 c82:	31 f0       	breq	.+12     	; 0xc90 <__fp_mpack_finite+0xc>

00000c84 <__fp_mpack_finite>:
 c84:	91 50       	subi	r25, 0x01	; 1
 c86:	20 f4       	brcc	.+8      	; 0xc90 <__fp_mpack_finite+0xc>
 c88:	87 95       	ror	r24
 c8a:	77 95       	ror	r23
 c8c:	67 95       	ror	r22
 c8e:	b7 95       	ror	r27
 c90:	88 0f       	add	r24, r24
 c92:	91 1d       	adc	r25, r1
 c94:	96 95       	lsr	r25
 c96:	87 95       	ror	r24
 c98:	97 f9       	bld	r25, 7
 c9a:	08 95       	ret

00000c9c <_exit>:
 c9c:	f8 94       	cli

00000c9e <__stop_program>:
 c9e:	ff cf       	rjmp	.-2      	; 0xc9e <__stop_program>
